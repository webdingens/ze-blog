---
import { ENTRIES_PER_PAGE } from "../consts";
import { CollectionEntry, getCollection } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";
import BasePage from "../layouts/BasePage.astro";

const page = Astro.props?.page || 1;
let posts =
	Astro.props?.posts ||
	(await getCollection("blog", ({ data }) => {
		// if not in DEV mode exclude draft
		return import.meta.env.DEV || !data.draft;
	}));
posts.sort(
	(a, b) =>
		(b.data.updatedDate ?? b.data.pubDate).valueOf() -
		(a.data.updatedDate ?? a.data.pubDate).valueOf()
);
const pages = Astro.props?.pages || Math.ceil(posts.length / ENTRIES_PER_PAGE);
posts = posts.slice(0, ENTRIES_PER_PAGE);

const title = Astro.props?.title || `Blog entries page ${page}`;
const description =
	Astro.props?.description ||
	`Paginated overview over blog entries, page ${page}`;

type Props = {
	posts?: CollectionEntry<"blog">[];
	page?: number;
	pages?: number;
	title?: string;
	description?: string;
};
---

<BasePage title={title} description={description}>
	<style slot="head-after">
		ul {
			list-style-type: none;
			padding: unset;
		}
		ul li {
			display: flex;
			align-items: flex-start;
		}
		ul li + li {
			margin-top: 0.5em;
		}
		ul li :global(time) {
			flex: 0 0 130px;
			font-style: italic;
		}
		ul li p {
			margin: 0;
		}
	</style>
	<section>
		{page === 1 && <h2>Latest blog entries and changes</h2>}
		<ul>
			{
				posts.map((post) => (
					<li>
						<FormattedDate date={post.data.pubDate} />
						<div>
							<a href={`/blog/${post.slug}/`}>{post.data.title}</a>
							<p>{post.data.description}</p>
						</div>
					</li>
				))
			}
		</ul>

		{
			pages > 1 && (
				<div class="pagination">
					{page > 1 && <a href={`/blog/page-${page - 1}`}>Prev</a>}
					<span>Page {page}</span>
					{page < pages && <a href={`/blog/page-${page + 1}`}>Next</a>}
				</div>
			)
		}
	</section>
</BasePage>
